"""
InvenioRDM settings for Rogue Scholar.

This file was automatically generated by 'invenio-cli init'.

For the full list of settings and their values, see
https://inveniordm.docs.cern.ch/reference/configuration/.
"""

from copy import deepcopy
from typing import Any
from datetime import datetime, timedelta
import re
from flask import request, url_for
from opensearch_dsl.query import Range
import idutils
from marshmallow import validate, fields
from marshmallow_utils.fields import SanitizedUnicode
from invenio_rdm_records.services.pids import providers
from invenio_rdm_records.services import facets
from invenio_rdm_records.contrib.journal import (
    JOURNAL_CUSTOM_FIELDS,
    JOURNAL_CUSTOM_FIELDS_UI,
    JOURNAL_NAMESPACE,
)
from invenio_records_resources.services.custom_fields import (
    TextCF,
    KeywordCF,
    BaseListCF,
)
from invenio_records_resources.services.records.queryparser import (
    FieldValueMapper,
    QueryParser,
    SearchFieldTransformer,
)
from invenio_search.engine import dsl
from invenio_records_resources.services.records.facets.facets import (
    LabelledFacetMixin,
    TermsFacet,
    CFTermsFacet,
)
from invenio_communities.communities.records.models import CommunityMetadata
from invenio_db import db
from luqum.tree import Phrase

from invenio_access import action_factory
from invenio_records.dictutils import dict_lookup
from invenio_records_permissions.generators import (
    ConditionalGenerator,
    Generator,
)
from invenio_communities.permissions import CommunityPermissionPolicy
from invenio_rdm_records.services.generators import (
    AccessGrant,
    IfRestricted,
    RecordOwners,
)
from invenio_rdm_records.services.permissions import RDMRecordPermissionPolicy
from invenio_records_permissions.generators import (
    SystemProcess,
)
from invenio_oauthclient.contrib.orcid import ORCIDOAuthSettingsHelper
from invenio_oauthclient.views.client import auto_redirect_login
from invenio_vocabularies.services.facets import VocabularyLabels
from invenio_vocabularies.contrib.funders.facets import FundersLabels
from invenio_vocabularies.contrib.affiliations.facets import AffiliationsLabels


def _(x):  # needed to avoid start time failure with lazy strings
    return x


RATELIMIT_ENABLED = True
RATELIMIT_AUTHENTICATED_USER = "50000 per hour;900 per minute"
RATELIMIT_GUEST_USER = "30000 per hour;500 per minute"

# Flask
# =====
# See https://flask.palletsprojects.com/en/1.1.x/config/

# Define the value of the cache control header `max-age` returned by the server when serving
# public files. Files will be cached by the browser for the provided number of seconds.
# See flask documentation for more information:
# https://flask.palletsprojects.com/en/2.1.x/config/#SEND_FILE_MAX_AGE_DEFAULT
SEND_FILE_MAX_AGE_DEFAULT = 300

# Set via env variable
# SECRET_KEY=

# Since HAProxy and Nginx route all requests no matter the host header
# provided, the allowed hosts variable is set to localhost. In production it
# should be set to the correct host and it is strongly recommended to only
# route correct hosts to the application.
APP_ALLOWED_HOSTS = ["localhost", "127.0.0.1"]


# Flask-SQLAlchemy
# ================
# See https://flask-sqlalchemy.palletsprojects.com/en/2.x/config/

# Set via env variable
# SQLALCHEMY_DATABASE_URI=


# Invenio-App
# ===========
# See https://invenio-app.readthedocs.io/en/latest/configuration.html

APP_DEFAULT_SECURE_HEADERS = {
    "content_security_policy": {
        "default-src": [
            "'self'",
            "data:",  # for fonts
            "'unsafe-inline'",  # for inline scripts and styles
            "blob:",  # for pdf preview
            "fly.storage.tigris.dev",  # for S3 object storage
            # Add your own policies here (e.g. analytics)
        ],
        "img-src": [
            "*",
        ],
    },
    "force_https": True,
    "force_https_permanent": False,
    "force_file_save": False,
    "frame_options": "sameorigin",
    "frame_options_allow_from": None,
    "strict_transport_security": True,
    "strict_transport_security_preload": False,
    "strict_transport_security_max_age": 31556926,  # One year in seconds
    "strict_transport_security_include_subdomains": True,
    "content_security_policy_report_uri": None,
    "content_security_policy_report_only": False,
    "session_cookie_secure": True,
    "session_cookie_http_only": True,
}


# Flask-Babel
# ===========
# See https://python-babel.github.io/flask-babel/#configuration

# Default locale (language)
BABEL_DEFAULT_LOCALE = "en"
# Default time zone
BABEL_DEFAULT_TIMEZONE = "UTC"


# Invenio-I18N
# ============
# See https://invenio-i18n.readthedocs.io/en/latest/configuration.html

# Other supported languages (do not include BABEL_DEFAULT_LOCALE in list).
I18N_LANGUAGES = [
    ("de", _("German")),
    ("es", _("Spanish")),
    ("fr", _("French")),
    ("it", _("Italian")),
    ("pt", _("Portuguese")),
    ("sl", _("Slovenian")),
    ("tr", _("Turkish")),
]

# Invenio-Mail
# ===========
# See https://invenio-mail.readthedocs.io/en/latest/configuration.html

# Set this to False when enable email sending.
MAIL_SUPPRESS_SEND = True

# Invenio-Theme
# =============
# See https://invenio-theme.readthedocs.io/en/latest/configuration.html

# The name of the site to be used on the header and as a title.
THEME_SITENAME = "Rogue Scholar"
# Frontpage title
THEME_FRONTPAGE_TITLE = "Rogue Scholar"
# Frontpage subtitle
THEME_FRONTPAGE_SUBTITLE = (
    "A starter project for the turn-key research data management repository."
)
# Header logo
THEME_LOGO = "images/starter.svg"

# Invenio-logging Sentry
# ----------------------
LOGGING_SENTRY_INIT_KWARGS = {
    # Add Sentry SDK configuration options here, e.g.:
    # Instruct Sentry to send user data attached to the event
    "send_default_pii": True,
}

# Invenio-App-RDM
# ===============
# See https://invenio-app-rdm.readthedocs.io/en/latest/configuration.html

# Instance's theme entrypoint file. Path relative to the ``assets/`` folder.
INSTANCE_THEME_FILE = "./less/theme.less"

# Invenio-Files-Rest
# ==================
FILES_REST_STORAGE_FACTORY = "invenio_s3.s3fs_storage_factory"

# Invenio-S3
# ==========
S3_ENDPOINT_URL = "http://localhost:9000/"
S3_ACCESS_KEY_ID = "CHANGE_ME"
S3_SECRET_ACCESS_KEY = "CHANGE_ME"

# Invenio-Records-Resources
# =========================
# See https://github.com/inveniosoftware/invenio-records-resources/blob/master/invenio_records_resources/config.py

SITE_UI_URL = "https://localhost"

SITE_API_URL = "https://localhost/api"

APP_RDM_DEPOSIT_FORM_DEFAULTS = {
    "publication_date": lambda: datetime.now().strftime("%Y-%m-%d"),
    "creators": [
        {"person_or_org": {"name": "No author", "type": "organizational"}}
    ],
    "rights": [
        {
            "id": "cc-by-4.0",
            "title": "Creative Commons Attribution 4.0 International",
            "description": (
                "The Creative Commons Attribution license allows "
                "re-distribution and re-use of a licensed work "
                "on the condition that the creator is "
                "appropriately credited."
            ),
            "link": "https://creativecommons.org/licenses/by/4.0/legalcode",
        }
    ],
    "resource_type": {
        "id": "publication-blogpost",
    },
    "title": "No title",
}

# See https://github.com/inveniosoftware/invenio-app-rdm/blob/master/invenio_app_rdm/config.py
APP_RDM_DEPOSIT_FORM_AUTOCOMPLETE_NAMES = "search"  # "search_only" or "off"

# Invenio-RDM-Records
# ===================
# See https://inveniordm.docs.cern.ch/customize/dois/
DATACITE_ENABLED = False

#
# Persistent identifiers configuration
#
RDM_PERSISTENT_IDENTIFIER_PROVIDERS = [
    # DOI provider for externally managed DOIs
    providers.ExternalPIDProvider(
        "external",
        "doi",
        validators=[
            providers.BlockedPrefixes(config_names=["DATACITE_PREFIX"])
        ],
        label=_("DOI"),
    ),
    # OAI identifier
    providers.OAIPIDProvider(
        "oai",
        label=_("OAI ID"),
    ),
]
"""A list of configured persistent identifier providers."""

RDM_PERSISTENT_IDENTIFIERS = {
    "doi": {
        "providers": ["external"],
        "required": False,
        "label": _("DOI"),
        "validator": idutils.is_doi,
        "normalizer": idutils.normalize_doi,
        "is_enabled": providers.ExternalPIDProvider.is_enabled,
    },
    "oai": {
        "providers": ["oai"],
        "required": True,
        "label": _("OAI"),
        "is_enabled": providers.OAIPIDProvider.is_enabled,
    },
}
"""The configured persistent identifiers for records."""

RDM_PARENT_PERSISTENT_IDENTIFIERS = {}


def always_valid(identifier):
    """Gives every identifier as valid."""
    return True


RDM_RECORDS_IDENTIFIERS_SCHEMES = {
    "ark": {"label": _("ARK"), "validator": idutils.is_ark, "datacite": "ARK"},
    "arxiv": {
        "label": _("arXiv"),
        "validator": idutils.is_arxiv,
        "datacite": "arXiv",
    },
    "ads": {
        "label": _("Bibcode"),
        "validator": idutils.is_ads,
        "datacite": "bibcode",
    },
    "crossreffunderid": {
        "label": _("Crossref Funder ID"),
        "validator": always_valid,
        "datacite": "Crossref Funder ID",
    },
    "doi": {"label": _("DOI"), "validator": idutils.is_doi, "datacite": "DOI"},
    "ean13": {
        "label": _("EAN13"),
        "validator": idutils.is_ean13,
        "datacite": "EAN13",
    },
    "eissn": {
        "label": _("EISSN"),
        "validator": idutils.is_issn,
        "datacite": "EISSN",
    },
    "grid": {
        "label": _("GRID"),
        "validator": always_valid,
        "datacite": "GRID",
    },
    "handle": {
        "label": _("Handle"),
        "validator": idutils.is_handle,
        "datacite": "Handle",
    },
    "igsn": {
        "label": _("IGSN"),
        "validator": always_valid,
        "datacite": "IGSN",
    },
    "isbn": {
        "label": _("ISBN"),
        "validator": idutils.is_isbn,
        "datacite": "ISBN",
    },
    "isni": {
        "label": _("ISNI"),
        "validator": idutils.is_isni,
        "datacite": "ISNI",
    },
    "issn": {
        "label": _("ISSN"),
        "validator": idutils.is_issn,
        "datacite": "ISSN",
    },
    "istc": {
        "label": _("ISTC"),
        "validator": idutils.is_istc,
        "datacite": "ISTC",
    },
    "lissn": {
        "label": _("LISSN"),
        "validator": idutils.is_issn,
        "datacite": "LISSN",
    },
    "lsid": {
        "label": _("LSID"),
        "validator": idutils.is_lsid,
        "datacite": "LSID",
    },
    "pmid": {
        "label": _("PMID"),
        "validator": idutils.is_pmid,
        "datacite": "PMID",
    },
    "purl": {
        "label": _("PURL"),
        "validator": idutils.is_purl,
        "datacite": "PURL",
    },
    "upc": {"label": _("UPC"), "validator": always_valid, "datacite": "UPC"},
    "url": {"label": _("URL"), "validator": idutils.is_url, "datacite": "URL"},
    "urn": {"label": _("URN"), "validator": idutils.is_urn, "datacite": "URN"},
    "w3id": {
        "label": _("W3ID"),
        "validator": always_valid,
        "datacite": "w3id",
    },
    # Custom identifiers added for Rogue Scholar
    "uuid": {
        "label": _("UUID"),
        "validator": always_valid,
        "datacite": "UUID",
    },
    "guid": {
        "label": _("GUID"),
        "validator": always_valid,
        "datacite": "GUID",
    },
    "other": {
        "label": _("Other"),
        "validator": always_valid,
        "datacite": "Other",
    },
}
"""These are used for references, main, alternate and related identifiers."""

# Authentication - Invenio-Accounts and Invenio-OAuthclient
# =========================================================
# See: https://inveniordm.docs.cern.ch/customize/authentication/

# Invenio-Accounts
# ----------------
# See https://github.com/inveniosoftware/invenio-accounts/blob/master/invenio_accounts/config.py
ACCOUNTS_LOCAL_LOGIN_ENABLED = True  # enable local login
ACCOUNTS_DEFAULT_USER_VISIBILITY = "public"
SECURITY_REGISTERABLE = True  # local login: allow users to register
SECURITY_RECOVERABLE = True  # local login: allow users to reset the password
SECURITY_CHANGEABLE = True  # local login: allow users to change psw
SECURITY_CONFIRMABLE = True  # local login: users can confirm e-mail address
SECURITY_LOGIN_WITHOUT_CONFIRMATION = (
    False  # don't allow users to login without confirming
)

# Static pages
APP_RDM_PAGES = {
    "board": "/board",
}

# Enable optional custom fields
RDM_NAMESPACES = {
    **JOURNAL_NAMESPACE,
    "rs": None,
}


class CitationsCF(BaseListCF):
    """Citations with identifier, scheme and reference."""

    def __init__(self, name, **kwargs):
        """Constructor."""
        super().__init__(
            name,
            field_cls=fields.Nested,
            field_args=dict(
                nested=dict(
                    identifier=SanitizedUnicode(),
                    scheme=SanitizedUnicode(),
                    reference=SanitizedUnicode(),
                )
            ),
            multiple=True,
            **kwargs,
        )

    @property
    def mapping(self):
        """Return the mapping."""
        return {
            "properties": {
                "identifier": {"type": "text"},
                "scheme": {"type": "text"},
                "reference": {"type": "text"},
            }
        }


RDM_CUSTOM_FIELDS = [
    *JOURNAL_CUSTOM_FIELDS,
    TextCF(  # content in markdown format
        name="rs:content_text",
    ),
    TextCF(  # feature image url
        name="rs:image",
        field_args={
            "validate": validate.URL(),
        },
        multiple=False,
    ),
    KeywordCF(  # blogging platform
        name="rs:generator"
    ),
    CitationsCF(  # citations
        name="rs:citations"
    ),
]


RDM_CUSTOM_FIELDS_UI = [
    {
        "section": _("Publishing information"),
        "hide_from_landing_page": True,
        "fields": [
            # journal
            *JOURNAL_CUSTOM_FIELDS_UI["fields"],
        ],
    },
    {
        "section": _("Images"),
        "hide_from_landing_page": True,
        "fields": [
            dict(
                field="rs:image",
                ui_widget="Input",
                props=dict(
                    label="Feature Image URL",
                    icon="image",
                    required=False,
                ),
            ),
        ],
    },
]

COMMUNITIES_CUSTOM_FIELDS = [
    TextCF(name="rs:issn"),
    TextCF(name="rs:feed_url"),
    KeywordCF(name="rs:feed_format"),
    KeywordCF(name="rs:generator"),
    KeywordCF(name="rs:prefix"),
    KeywordCF(name="rs:license"),
    TextCF(name="rs:joined"),
    KeywordCF(name="rs:language"),
    KeywordCF(name="rs:category"),
]

COMMUNITIES_CUSTOM_FIELDS_UI = [
    {
        "section": _("Feed information"),
        "fields": [
            dict(
                field="rs:feed_url",
                ui_widget="Input",
                props=dict(
                    label=_("Feed URL"),
                    placeholder="",
                    icon="rss",
                    description=_("The feed URL for this community."),
                    required=False,
                ),
            ),
            dict(
                field="rs:feed_format",
                ui_widget="Input",
                props=dict(
                    label=_("Feed Format"),
                    placeholder="",
                    icon="compass",
                    description=_(
                        "The format of the feed for this community."
                    ),
                    required=False,
                ),
            ),
            dict(
                field="rs:generator",
                ui_widget="Input",
                props=dict(
                    label=_("Generator"),
                    placeholder="",
                    icon="keyboard",
                    description=_(
                        "The feed generator software for this community."
                    ),
                    required=False,
                ),
            ),
        ],
    },
    {
        "section": _("Detailed Information"),
        "fields": [
            dict(
                field="rs:license",
                ui_widget="Input",
                props=dict(
                    label=_("License"),
                    placeholder="",
                    icon="creative commons",
                    description=_(
                        "The License for content in this community."
                    ),
                    required=False,
                ),
            ),
            dict(
                field="rs:issn",
                ui_widget="Input",
                props=dict(
                    label=_("ISSN"),
                    placeholder="",
                    icon="globe",
                    description=_("The ISSN for this community."),
                    required=False,
                ),
            ),
            dict(
                field="rs:prefix",
                ui_widget="Input",
                props=dict(
                    label=_("DOI Prefix"),
                    placeholder="",
                    icon="barcode",
                    description=_("The DOI prefix for this community."),
                    required=False,
                ),
            ),
            dict(
                field="rs:joined",
                ui_widget="Input",
                props=dict(
                    label=_("Date Joined"),
                    placeholder="",
                    icon="calendar plus",
                    description=_("The date this community has joined."),
                    required=False,
                ),
            ),
            dict(
                field="rs:language",
                ui_widget="Input",
                props=dict(
                    label=_("Language"),
                    placeholder="",
                    icon="language",
                    description=_("The language of this community."),
                    required=False,
                ),
            ),
            dict(
                field="rs:category",
                ui_widget="Input",
                props=dict(
                    label=_("Subject Area"),
                    placeholder="",
                    icon="chart pie",
                    description=_("The subject area for this community."),
                    required=False,
                ),
            ),
        ],
    },
]

COMMUNITIES_SORT_OPTIONS = {
    "bestmatch": dict(
        title=_("Best match"),
        fields=["_score"],  # ES defaults to desc on `_score` field
    ),
    "newest": dict(
        title=_("Newest"),
        fields=["-created"],
    ),
    "oldest": dict(
        title=_("Oldest"),
        fields=["created"],
    ),
    "version": dict(
        title=_("Version"),
        fields=["-versions.index"],
    ),
    "updated-desc": dict(
        title=_("Recently updated"),
        fields=["-updated"],
    ),
    "updated-asc": dict(
        title=_("Least recently updated"),
        fields=["updated"],
    ),
    "title-asc": dict(
        title=_("Title"),
        fields=["metadata.title"],
    ),
}
"""Definitions of available record sort options."""

RDM_SORT_OPTIONS = {
    "bestmatch": dict(
        title=_("Best match"),
        fields=["_score"],
    ),
    "newest": dict(
        title=_("Newest"),
        fields=["-metadata.publication_date", "-metadata.dates.date"],
    ),
    "oldest": dict(
        title=_("Oldest"),
        fields=["metadata.publication_date", "metadata.dates.date"],
    ),
    "version": dict(
        title=_("Version"),
        fields=["-versions.index"],
    ),
    "updated-desc": dict(
        title=_("Recently updated"),
        fields=["-updated"],
    ),
    "updated-asc": dict(
        title=_("Least recently updated"),
        fields=["updated"],
    ),
    "created-desc": dict(
        title=_("Recently added"),
        fields=["-created"],
    ),
    "created-asc": dict(
        title=_("Least recently added"),
        fields=["created"],
    ),
    "mostviewed": dict(
        title=_("Most viewed"),
        fields=["-stats.all_versions.unique_views"],
    ),
}


class DateHistogramFacet(LabelledFacetMixin, dsl.DateHistogramFacet):
    """Facet for date histogram aggregations."""

    def __init__(self, field=None, subfield=None, splitchar="::", **kwargs):
        """Initialize the date histogram facet."""
        self._field = field
        self._subfield = subfield
        self._splitchar = splitchar
        super().__init__(**kwargs)

    def _date_interval_year(d: Any) -> Any:
        return d.replace(
            year=d.year + 1,
            day=(28 if d.month == 2 and d.day == 29 else d.day),
        )

    def _date_interval_month(d: Any) -> Any:
        return (d + timedelta(days=32)).replace(day=1)

    def _date_interval_week(d: Any) -> Any:
        return d + timedelta(days=7)

    def _date_interval_day(d: Any) -> Any:
        return d + timedelta(days=1)

    def _date_interval_hour(d: Any) -> Any:
        return d + timedelta(hours=1)

    DATE_INTERVALS = {
        "year": _date_interval_year,
        "1Y": _date_interval_year,
        "month": _date_interval_month,
        "1M": _date_interval_month,
        "week": _date_interval_week,
        "1w": _date_interval_week,
        "day": _date_interval_day,
        "1d": _date_interval_day,
        "hour": _date_interval_hour,
        "1h": _date_interval_hour,
    }

    def get_value(self, bucket: Any) -> Any:
        if not isinstance(bucket["key"], datetime):
            # OpenSearch returns key=None instead of 0 for date 1970-01-01,
            # so we need to set key to 0 to avoid TypeError exception
            if bucket["key"] is None:
                bucket["key"] = 0
            # Preserve milliseconds in the datetime
            return datetime.utcfromtimestamp(int(bucket["key"]) / 1000.0)  # type: ignore
        else:
            return bucket["key"]

    def get_value_filter(self, filter_value: Any) -> Any:
        for interval_type in ("calendar_interval", "fixed_interval"):
            if interval_type in self._params:
                break
        else:
            interval_type = "interval"

        return Range(
            _expand__to_dot=False,
            **{
                self._params["field"]: {
                    "gte": filter_value,
                    "lt": self.DATE_INTERVALS[self._params[interval_type]](
                        filter_value
                    ),
                }
            },
        )

    # Note, LabelledFacetMixin must be first class instantiated. This ensures
    # that we overwrite the Facet.get_values() method in the Facet base class.


RDM_FACETS = {
    "access_status": {
        "facet": facets.access_status,
        "ui": {
            "field": "access.status",
        },
    },
    "is_published": {
        "facet": facets.is_published,
        "ui": {
            "field": "is_published",
        },
    },
    "file_type": {
        "facet": facets.filetype,
        "ui": {
            "field": "files.types",
        },
    },
    "affiliations": {
        "facet": TermsFacet(
            field="metadata.creators.affiliations.id",
            label=_("Affiliations"),
            value_labels=AffiliationsLabels("affiliations"),
        ),
        "ui": {
            "field": "metadata.creators.affiliations",
        },
    },
    "funders": {
        "facet": TermsFacet(
            field="metadata.funding.funder.id",
            label=_("Funders"),
            value_labels=FundersLabels("funders"),
        ),
        "ui": {
            "field": "metadata.funding.funder",
        },
    },
    "author_identifiers": {
        "facet": TermsFacet(
            field="metadata.creators.person_or_org.identifiers.scheme",
            label=_("Author Identifiers"),
            value_labels={"orcid": _("ORCID")},
        ),
        "ui": {
            "field": "metadata.creators.person_or_org.identifiers.scheme",
        },
    },
    "references": {
        "facet": TermsFacet(
            field="metadata.references.scheme",
            label=_("References"),
            value_labels={
                "doi": _("DOI"),
                "url": _("URL"),
                "": _("No identifier"),
            },
        ),
        "ui": {
            "field": "metadata.references.scheme",
        },
    },
    "citations": {
        "facet": CFTermsFacet(
            field="rs:citations.scheme",
            label=_("Citations"),
            value_labels={"doi": _("DOI")},
        ),
        "ui": {
            "field": CFTermsFacet.field("rs:citations.scheme"),
        },
    },
    "platforms": {
        "facet": CFTermsFacet(
            field="rs:generator",
            label=_("Platforms"),
        ),
        "ui": {
            "field": CFTermsFacet.field("rs:generator"),
        },
    },
    "language": {
        "facet": facets.language,
        "ui": {
            "field": "languages",
        },
    },
    "rights": {
        "facet": TermsFacet(
            field="metadata.rights.id",
            label=_("Rights"),
            value_labels=VocabularyLabels("rights"),
        ),
        "ui": {
            "field": "rights",
        },
    },
    "resource_type": {
        "facet": facets.resource_type,
        "ui": {
            "field": "resource_type.type",
            "childAgg": {
                "field": "resource_type.subtype",
            },
        },
    },
    "subject": {
        "facet": facets.subject,
        "ui": {
            "field": "subjects.subject",
        },
    },
    "publication_year": {
        "facet": DateHistogramFacet(
            field="metadata.publication_date",
            interval="year",
            label=_("Publication Year"),
        ),
        "ui": {
            "field": "metadata.publication_date",
        },
    },
}


# from https://github.com/zenodo/zenodo-rdm/blob/master/site/zenodo_rdm/queryparser.py
def word_doi(node):
    """Quote DOIs."""
    if not node.value.startswith("10."):
        return node
    return Phrase(f'"{node.value}"')


def word_communities(node):
    """Resolve community slugs to IDs."""
    slug = node.value
    uuid = (
        db.session.query(CommunityMetadata.id)
        .filter(CommunityMetadata.slug == slug)
        .scalar()
    )
    return Phrase(f'"{uuid}"')


COMMUNITIES_SEARCH = {
    "facets": ["type"],
    # Supported values from COMMUNITIES_SORT_OPTIONS
    "sort": ["bestmatch", "newest", "oldest", "updated-desc"],
}
"""Community search configuration (i.e list of communities)"""

RDM_SEARCH = {
    # Supported values from RDM_FACETS
    "facets": [
        "language",
        "subject",
        "author_identifiers",
        "affiliations",
        "funders",
        "references",
    ],
    # Supported values from RDM_SORT_OPTIONS
    "sort": [
        "bestmatch",
        "newest",
        "oldest",
        "updated-desc",
        "updated-asc",
        "created-desc",
        "created-asc",
        "mostviewed",
    ],
    "query_parser_cls": QueryParser.factory(
        mapping={
            # shortcuts
            "title": "metadata.title",
            "subject": "metadata.subjects.subject",
            "contributor": "metadata.creators.person_or_org.name",
            "affiliation": "metadata.creators.affiliations.name",
            "funder": "metadata.funding.funder.name",
            "funding": "metadata.funding.award.number",
            "references": FieldValueMapper(
                "metadata.references.identifier", word=word_doi
            ),
            "citations": FieldValueMapper(
                "custom_fields.rs\:citations.identifier", word=word_doi
            ),
            # taken from Zenodo
            "doi": FieldValueMapper("pids.doi.identifier", word=word_doi),
            "communities": FieldValueMapper(
                "parent.communities.ids", word=word_communities
            ),
            # Persistent identifiers
            "orcid": "metadata.creators.person_or_org.identifiers.identifier",
            "ror": "metadata.creators.affiliations.id",
            "issn": "custom_fields.journal\:journal.issn",
            # Specific to Rogue Scholar
            "content": "custom_fields.rs\:content_text",
            "platform": "custom_fields.rs\:generator",
        },
        tree_transformer_cls=SearchFieldTransformer,
    ),
}

COMMUNITIES_ALLOW_MEMBERSHIP_REQUESTS = True

COMMUNITIES_RECORDS_SEARCH = deepcopy(RDM_SEARCH)
"""Communities record search config is the same as the main record search."""

RDM_SEARCH_DRAFTS = {
    "facets": [
        "is_published",
        "language",
        "subject",
        "author_identifiers",
        "affiliations",
        "funders",
        "references",
    ],
    "sort": [
        "bestmatch",
        "newest",
        "oldest",
        "updated-desc",
        "updated-asc",
        "created-desc",
        "created-asc",
    ],
}
"""User records search configuration (i.e. list of uploads)."""

# Toggle to show or hide the 'Browse' menu entry for communities.
COMMUNITIES_SHOW_BROWSE_MENU_ENTRY = True

# Enable featured communities
COMMUNITIES_ADMINISTRATION_DISABLED = False

# Invenio-OAuthclient
# -------------------
# See https://github.com/inveniosoftware/invenio-oauthclient/blob/master/invenio_oauthclient/config.py

_orcid_app = ORCIDOAuthSettingsHelper(
    title="ORCID",
    description="ORCID - Connecting Research and Researchers.",
    base_url="https://pub.orcid.org/",
    access_token_url="https://orcid.org/oauth/token",
    authorize_url="https://orcid.org/oauth/authorize#show_login",
)

OAUTHCLIENT_REMOTE_APPS = {
    "orcid": _orcid_app.remote_app,
}

# Set via env variable
ORCID_APP_CREDENTIALS = {
    "consumer_key": "CHANGE ME",
    "consumer_secret": "CHANGE ME",
}


ACCOUNTS_LOGIN_VIEW_FUNCTION = (
    auto_redirect_login  # autoredirect to external login if enabled
)
OAUTHCLIENT_AUTO_REDIRECT_TO_EXTERNAL_LOGIN = (
    False  # autoredirect to external login
)

# Invenio-UserProfiles
# --------------------
USERPROFILES_READ_ONLY = (
    False  # allow users to change profile info (name, email, etc...)
)

# OAI-PMH
# =======
# See https://github.com/inveniosoftware/invenio-oaiserver/blob/master/invenio_oaiserver/config.py

OAISERVER_ID_PREFIX = "invenio-rdm"
"""The prefix that will be applied to the generated OAI-PMH ids."""

# When debugging it is helpful to comment out these so they don't interfere
# with your prompt.
# from datetime import datetime, timedelta
#
# from celery.schedules import crontab
#
# CELERY_BEAT_SCHEDULE = {
#     "indexer": {
#         "task": "invenio_records_resources.tasks.manage_indexer_queues",
#         "schedule": timedelta(seconds=10),
#     },
#     "accounts_sessions": {
#         "task": "invenio_accounts.tasks.clean_session_table",
#         "schedule": timedelta(minutes=60),
#     },
#     "accounts_ips": {
#         "task": "invenio_accounts.tasks.delete_ips",
#         "schedule": timedelta(hours=6),
#     },
#     "draft_resources": {
#         "task": ("invenio_drafts_resources.services.records.tasks.cleanup_drafts"),
#         "schedule": timedelta(minutes=60),
#     },
#     "rdm_records": {
#         "task": "invenio_rdm_records.services.tasks.update_expired_embargos",
#         "schedule": crontab(minute=2, hour=0),
#     },
# }
# """Scheduled tasks configuration (aka cronjobs)."""

# Invenio-Search
# --------------

SEARCH_INDEX_PREFIX = "invenio-rdm-starter-"

# See https://inveniordm.docs.cern.ch/reference/configuration/
RDM_CITATION_STYLES = [
    ("apa", _("APA")),
    ("harvard-cite-them-right", _("Harvard")),
    ("ieee", _("IEEE")),
    ("modern-language-association", _("MLA")),
    ("vancouver", _("Vancouver")),
    ("chicago-author-date", _("Chicago")),
    ("american-chemical-society", _("ACS")),
    ("the-british-journal-for-the-philosophy-of-science", _("BJPS")),
]

RDM_DEFAULT_CITATION_STYLE = "apa"

# Redirection of legacy URLs
# --------------------------


def camelcase_to_titlecase(s):
    t = re.sub(r"(?<=[a-z])(?=[A-Z])", " ", s)
    return t[0].upper() + t[1:].lower()


def blogs_detail_view_function():
    """Implements redirector view function for blogs detail.

    The following routes are redirected as follows:
        - /blogs/<id>/ -> GET /communities/<pid_value>

    :return: url for the view 'invenio_app_rdm_communities.communities_detail'
    :rtype: str
    """
    _id = request.view_args["id"]
    values = {"pid_value": _id}
    target = url_for(
        "invenio_app_rdm_communities.communities_detail", **values
    )
    return target


def blogs_search_view_function():
    """Implements redirector view function for blogs search.

    The following routes are redirected as follows:
        - /blogs -> GET /communities/search?q=<query>&f=<tags>&p=<page>

    :return: url for the view 'invenio_communities.communities_search'
    :rtype: str
    """
    _q = request.args.get("query", "")
    category = request.args.get("category", None)
    _f = ""
    if category:
        category = camelcase_to_titlecase(category)
        _f = f"subject:{category}"
    _p = request.args.get("page", 1)
    values = {"q": _q, "f": _f, "p": _p}
    target = url_for("invenio_communities.communities_search", **values)
    return target


def posts_detail_view_function():
    """Implements redirector view function for posts detail.
    Assumes that the pid_value is a DOI.

    The following routes are redirected as follows:
        - /posts/<prefix>/<suffix> -> GET /search?q=doi:<pid_value>

    :return: url for the view 'invenio_search_ui.search'
    :rtype: str
    """
    prefix = request.view_args["prefix"]
    suffix = request.view_args["suffix"]
    values = {"q": f"doi:{prefix}/{suffix}"}
    target = url_for("invenio_search_ui.search", **values)
    return target


def posts_search_view_function():
    """Implements redirector view function for posts search.

    The following routes are redirected as follows:
        - /posts -> GET /search?q=<query>&f=<tags>&p=<page>

    :return: url for the view 'invenio_search_ui.search'
    :rtype: str
    """
    _q = request.args.get("query", "")
    category = request.args.get("category", None)
    tags = request.args.get("tags", None)
    _f = ""
    if category:
        category = camelcase_to_titlecase(category)
        _f = f"subject:{category}"
    if tags:
        _f = f"subject:{tags}"
    _p = request.args.get("page", 1)
    values = {"q": _q, "f": _f, "p": _p}
    target = url_for("invenio_search_ui.search", **values)
    return target


REDIRECTOR_RULES = {
    "redirect_signin": {
        "source": "/auth/signin",
        "target": "https://legacy.rogue-scholar.org/auth/signin",
    },
    "redirect_about": {
        "source": "/about",
        "target": "https://legacy.rogue-scholar.org/about",
    },
    "redirect_board": {
        "source": "/board",
        "target": "https://legacy.rogue-scholar.org/board",
    },
    "redirect_blogs": {
        "source": "/blogs",
        "target": blogs_search_view_function,
    },
    "redirect_en_blogs": {
        "source": "/en/blogs",
        "target": blogs_search_view_function,
    },
    "redirect_de_blogs": {
        "source": "/de/blogs",
        "target": blogs_search_view_function,
    },
    "redirect_es_blogs": {
        "source": "/es/blogs",
        "target": blogs_search_view_function,
    },
    "redirect_fr_blogs": {
        "source": "/fr/blogs",
        "target": blogs_search_view_function,
    },
    "redirect_pt_blogs": {
        "source": "/pt/blogs",
        "target": blogs_search_view_function,
    },
    "redirect_it_blogs": {
        "source": "/it/blogs",
        "target": blogs_search_view_function,
    },
    "redirect_tr_blogs": {
        "source": "/tr/blogs",
        "target": blogs_search_view_function,
    },
    "redirect_blogs_detail": {
        "source": "/blogs/<id>",
        "target": blogs_detail_view_function,
    },
    "redirect_en_blogs_detail": {
        "source": "/en/blogs/<id>",
        "target": blogs_detail_view_function,
    },
    "redirect_de_blogs_detail": {
        "source": "/de/blogs/<id>",
        "target": blogs_detail_view_function,
    },
    "redirect_es_blogs_detail": {
        "source": "/es/blogs/<id>",
        "target": blogs_detail_view_function,
    },
    "redirect_fr_blogs_detail": {
        "source": "/fr/blogs/<id>",
        "target": blogs_detail_view_function,
    },
    "redirect_pt_blogs_detail": {
        "source": "/pt/blogs/<id>",
        "target": blogs_detail_view_function,
    },
    "redirect_it_blogs_detail": {
        "source": "/it/blogs/<id>",
        "target": blogs_detail_view_function,
    },
    "redirect_tr_blogs_detail": {
        "source": "/tr/blogs/<id>",
        "target": blogs_detail_view_function,
    },
    "redirect_posts": {
        "source": "/posts",
        "target": posts_search_view_function,
    },
    "redirect_en": {
        "source": "/en",
        "target": posts_search_view_function,
    },
    "redirect_de": {
        "source": "/de",
        "target": posts_search_view_function,
    },
    "redirect_es": {
        "source": "/es",
        "target": posts_search_view_function,
    },
    "redirect_fr": {
        "source": "/fr",
        "target": posts_search_view_function,
    },
    "redirect_pt": {
        "source": "/pt",
        "target": posts_search_view_function,
    },
    "redirect_it": {
        "source": "/it",
        "target": posts_search_view_function,
    },
    "redirect_tr": {
        "source": "/tr",
        "target": posts_search_view_function,
    },
    "redirect_en_posts": {
        "source": "/en/posts",
        "target": posts_search_view_function,
    },
    "redirect_de_posts": {
        "source": "/de/posts",
        "target": posts_search_view_function,
    },
    "redirect_es_posts": {
        "source": "/es/posts",
        "target": posts_search_view_function,
    },
    "redirect_fr_posts": {
        "source": "/fr/posts",
        "target": posts_search_view_function,
    },
    "redirect_pt_posts": {
        "source": "/pt/posts",
        "target": posts_search_view_function,
    },
    "redirect_it_posts": {
        "source": "/it/posts",
        "target": posts_search_view_function,
    },
    "redirect_tr_posts": {
        "source": "/tr/posts",
        "target": posts_search_view_function,
    },
    "redirect_posts_search": {
        "source": "/posts/<prefix>/<suffix>",
        "target": posts_detail_view_function,
    },
    "redirect_en_posts_search": {
        "source": "/en/posts/<prefix>/<suffix>",
        "target": posts_detail_view_function,
    },
    "redirect_de_posts_search": {
        "source": "/de/posts/<prefix>/<suffix>",
        "target": posts_detail_view_function,
    },
    "redirect_es_posts_search": {
        "source": "/es/posts/<prefix>/<suffix>",
        "target": posts_detail_view_function,
    },
    "redirect_fr_posts_search": {
        "source": "/fr/posts/<prefix>/<suffix>",
        "target": posts_detail_view_function,
    },
    "redirect_pt_posts_search": {
        "source": "/pt/posts/<prefix>/<suffix>",
        "target": posts_detail_view_function,
    },
    "redirect_it_posts_search": {
        "source": "/it/posts/<prefix>/<suffix>",
        "target": posts_detail_view_function,
    },
    "redirect_tr_posts_search": {
        "source": "/tr/posts/<prefix>/<suffix>",
        "target": posts_detail_view_function,
    },
}

"""RogueScholar permissions."""

# these are defined here as there is a circular dependency otherwise with the
# permissions.py file
media_files_management_action = action_factory("manage-media-files")
manage_external_doi_files_action = action_factory("manage-external-doi-files")


class IfFilesRestrictedForCommunity(IfRestricted):
    """Conditional generator for files restriction for community."""

    def __init__(self, then_, else_):
        """Constructor."""
        super().__init__("files", then_, else_)

    def _condition(self, record, **kwargs):
        """Check if community can access restricted files of the migrated record."""
        try:
            can_community_read_files = dict_lookup(
                record.parent, "permission_flags.can_community_read_files"
            )
        except KeyError:
            can_community_read_files = True

        is_restricted = super()._condition(record, **kwargs)
        if is_restricted:
            return not can_community_read_files
        else:
            return False


class MediaFilesManager(Generator):
    """Allows media files management."""

    def __init__(self):
        """Constructor."""
        super(MediaFilesManager, self).__init__()

    def needs(self, **kwargs):
        """Enabling Needs."""
        return [media_files_management_action]


class ExternalDOIFilesManager(Generator):
    """Allows to manage files for exteranl DOI records."""

    def __init__(self):
        """Initialize generator."""
        super(ExternalDOIFilesManager, self).__init__()

    def needs(self, **kwargs):
        """Enable Needs."""
        return [manage_external_doi_files_action]


class IfRecordManagementAllowedForCommunity(ConditionalGenerator):
    """Conditional generator for community access to record management."""

    def _condition(self, record, **kwargs):
        """Check if community can manage the migrated record."""
        if record is None:
            return False
        try:
            can_community_manage_record = dict_lookup(
                record.parent, "permission_flags.can_community_manage_record"
            )
        except KeyError:
            can_community_manage_record = True

        return can_community_manage_record

    def query_filter(self, **kwargs):
        """Filters for current identity as super user."""
        then_query = self._make_query(self.then_, **kwargs)
        else_query = self._make_query(self.else_, **kwargs)

        return then_query if then_query else else_query


class RogueScholarRecordPermissionPolicy(RDMRecordPermissionPolicy):
    """Access control configuration for records."""

    #
    # High-level permissions (used by low-level)
    #
    can_manage = [
        IfRecordManagementAllowedForCommunity(
            then_=RDMRecordPermissionPolicy.can_manage,
            else_=[
                RecordOwners(),
                AccessGrant("manage"),
                SystemProcess(),
            ],
        )
    ]
    can_curate = can_manage + [SystemProcess()]
    can_review = can_curate + [SystemProcess()]
    can_preview = can_curate + [SystemProcess()]

    #
    #  Records
    #

    # Used for search filtering of deleted records
    # cannot be implemented inside can_read - otherwise permission will
    # kick in before tombstone renders
    can_create = [SystemProcess()]
    can_read_deleted = [SystemProcess()]
    can_read_deleted_files = can_read_deleted
    can_media_read_deleted_files = can_read_deleted_files

    #
    # Drafts
    #
    # Allow reading metadata of a draft
    can_read_draft = can_preview
    # Allow reading files of a draft
    can_draft_read_files = can_preview + [SystemProcess()]
    # Allow updating metadata of a draft
    can_update_draft = can_review
    # Allow uploading, updating and deleting files in drafts
    can_draft_create_files = can_review
    can_draft_set_content_files = [SystemProcess()]
    can_draft_get_content_files = [SystemProcess()]
    can_draft_commit_files = [SystemProcess()]
    can_draft_update_files = can_review
    can_draft_delete_files = can_review
    can_manage_record_access = can_review

    #
    # PIDs
    #
    can_pid_create = can_review
    can_pid_register = can_review
    can_pid_update = can_review
    can_pid_discard = can_review
    can_pid_delete = can_review

    #
    # Actions
    #
    # Allow to put a record in edit mode (create a draft from record)
    can_edit = [SystemProcess()]
    # Allow deleting/discarding a draft and all associated files
    can_delete_draft = [SystemProcess()]
    # Allow creating a new version of an existing published record.
    can_new_version = [SystemProcess()]
    # Allow publishing a new record or changes to an existing record.
    can_publish = [SystemProcess()]
    # Allow lifting a record or draft.
    can_lift_embargo = [SystemProcess()]

    #
    # Record communities
    #
    # Who can add record to a community
    can_add_community = can_review

    # Media files
    can_draft_media_create_files = [MediaFilesManager(), SystemProcess()]
    can_draft_media_read_files = can_draft_media_create_files
    can_draft_media_set_content_files = [SystemProcess()]
    can_draft_media_commit_files = [SystemProcess()]
    can_draft_media_update_files = can_draft_media_create_files
    can_draft_media_delete_files = can_draft_media_create_files
    can_moderate = [SystemProcess()]
    can_media_create_files = [SystemProcess()]
    can_media_set_content_files = [SystemProcess()]
    can_media_commit_files = [SystemProcess()]
    can_media_update_files = [SystemProcess()]
    can_media_delete_files = [SystemProcess()]
    can_modify_locked_files = [SystemProcess()]


class RogueScholarCommunityPermissionPolicy(CommunityPermissionPolicy):
    """Permissions for Community CRUD operations.
    We start with limited permissions for community creation and moderation.
    """

    can_create = [SystemProcess()]
    can_moderate = [SystemProcess()]
    can_rename = [SystemProcess()]
    can_submit_record = [SystemProcess()]
    can_include_directly = [SystemProcess()]


RDM_PERMISSION_POLICY = RogueScholarRecordPermissionPolicy
"""Rogue Scholar record permission policy."""

COMMUNITIES_ALLOW_RESTRICTED = False
"""Don't allow restricted records in communities."""

COMMUNITIES_PERMISSION_POLICY = RogueScholarCommunityPermissionPolicy
"""Rogue Scholar community permission policy."""
