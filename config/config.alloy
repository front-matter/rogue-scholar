// ###############################
// #### Metrics Configuration ####
// ###############################

// Exporter for Docker cAdvisor metrics
prometheus.exporter.cadvisor "invenio" {
  storage_duration = "5m"
}

// Node exporter for host metrics
prometheus.exporter.unix "host" { /* use defaults */ }

// Discover Docker containers and extract metadata.
discovery.docker "containers" {
  host = "unix:///var/run/docker.sock"
}

prometheus.exporter.redis "cache" {
  redis_addr = "inveniordm-cache:6379"
}

// Configure a prometheus.scrape component to collect cadvisor metrics.
prometheus.scrape "cadvisor" {
  targets    = prometheus.exporter.cadvisor.invenio.targets
  forward_to = [ prometheus.remote_write.grafanacloud.receiver ]
  
  scrape_interval = "15s"
}

// // Scrape host exporter metrics
// prometheus.scrape "host" {
//   targets    = prometheus.exporter.unix.host.targets
//   forward_to = [ prometheus.remote_write.grafanacloud.receiver ]
  
//   scrape_interval = "15s"
// }

// prometheus.scrape "containers" {
//   targets    = discovery.docker.containers.targets
//   forward_to = [prometheus.remote_write.grafanacloud.receiver]
// }

// // Scrape Redis metrics.
// prometheus.scrape "cache" {
//   targets    = prometheus.exporter.redis.cache.targets
//   forward_to = [prometheus.remote_write.grafanacloud.receiver]
// }

// Configure a prometheus.remote_write component to send metrics to a Prometheus server.
prometheus.remote_write "grafanacloud" {
  endpoint {
    url = "https://prometheus-prod-24-prod-eu-west-2.grafana.net/api/prom/push"

    basic_auth {
      username = "2528507"
      password = env("PROMETHEUS_TOKEN")
    }
    
    queue_config {
      capacity = 10000
      min_shards = 1
      max_shards = 200
      batch_send_deadline = "5s"
      max_samples_per_send = 2000
    }
  }
}

// ###############################
// #### Logging Configuration ####
// ###############################

// // Discover Docker containers and extract metadata.
// discovery.docker "linux" {
//   host = "unix:///var/run/docker.sock"
// }

// // Define a relabeling rule to create a service name from the container name.
// discovery.relabel "logs_integrations_docker" {
//   targets = discovery.docker.linux.targets

//   rule {
//     source_labels = ["__meta_docker_container_name"]
//     regex = "/(.*)"
//     target_label = "service_name"
//   }

//   // Kamal-spezifische Labels
//   rule {
//     source_labels = ["__meta_docker_container_label_service"]
//     target_label = "kamal_service"
//   }
  
//   rule {
//     source_labels = ["__meta_docker_container_label_role"]
//     target_label = "kamal_role"
//   }
  
//   rule {
//     source_labels = ["__meta_docker_container_label_destination"]
//     target_label = "kamal_destination"
//   }

  
//   // Filter f√ºr Kamal Services
//   rule {
//     source_labels = ["__meta_docker_container_label_service"]
//     action = "keep"
//     regex = ".+|rogue-scholar.*"
//   }
  
//   // Add environment label for identification
//   rule {
//     target_label = "environment"
//     replacement = "staging"
//   }
// }

// // Configure a loki.source.docker component to collect logs from Docker containers.
// loki.source.docker "staging" {
//   host       = "unix:///var/run/docker.sock"
//   targets    = discovery.docker.linux.targets
//   labels     = {"platform" = "docker", "cluster" = "rogue-scholar-staging", "deployment_tool" = "kamal"}
//   forward_to = [loki.write.grafanacloud.receiver]
  
//   refresh_interval = "5s"
// }

// Configure a loki.write component to send logs to Grafana Cloud Loki.
loki.write "grafanacloud" {
  endpoint {
    url = "https://logs-prod-012.grafana.net/loki/api/v1/push"

    basic_auth {
      username = "1259930"
      password = env("LOKI_TOKEN")
    }
  }
}
