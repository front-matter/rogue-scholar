--- 
title: "Statistics"
format: 
  dashboard:
    scrolling: true 
---

```{python}
# | output: false
from os import environ
from dotenv import load_dotenv
from supabase import create_client, Client

loaded = load_dotenv()

url: str = environ.get("SUPABASE_URL")
key: str = environ.get("SUPABASE_ANON_KEY")
supabase: Client = create_client(url, key)
status = ["active", "archived", "expired"]

response = (
    supabase.table("blogs")
    .select("*", count="exact", head=True)
    .in_("status", status)
    .execute()
)
blog_count = response.count

response = supabase.table("posts_by_year").select("*").execute()
posts_by_year = [y for y in response.data if y["year"] in range(2005, 2026)]
post_count = 0
for y in posts_by_year:
    if y["year"] and y["year"] <= 2025:
        post_count += y["year_count"]

post_2025 = [y for y in posts_by_year if y["year"] == 2025]
post_2025_count = post_2025[0].get("year_count", 0)

response = supabase.table("posts_by_language").select("*").execute()
language_dict = {
    "en": "English",
    "de": "German",
    "es": "Spanish",
    "fr": "French",
    "it": "Italian",
    "pt": "Portuguese",
    "nl": "Dutch",
    "tr": "Turkish",
    "sl": "Slovenian",
    "ar": "Arabic",
    "ca": "Catalan",
}
posts_by_language = [
    {"language": language_dict[l["language"]], "lang_count": l["lang_count"]}
    for l in response.data
    if l["language"]
]

response = supabase.table("posts_by_category").select("*").execute()
category_dict = {
    "naturalSciences": "Natural sciences",
    "mathematics": "Natural sciences",
    "computerAndInformationSciences": "Natural sciences",
    "physicalSciences": "Natural sciences",
    "chemicalSciences": "Natural sciences",
    "earthAndRelatedEnvironmentalSciences": "Natural sciences",
    "biologicalSciences": "Natural sciences",
    "otherNaturalSciences": "Natural sciences",
    "engineeringAndTechnology": "Engineering and technology",
    "civilEngineering": "Engineering and technology",
    "electricalEngineering": "Engineering and technology",
    "mechanicalEngineering": "Engineering and technology",
    "chemicalEngineering": "Engineering and technology",
    "materialsEngineering": "Engineering and technology",
    "medicalEngineering": "Engineering and technology",
    "environmentalEngineering": "Engineering and technology",
    "environmentalBiotechnology": "Engineering and technology",
    "industrialBiotechnology": "Engineering and technology",
    "nanoTechnology": "Engineering and technology",
    "otherEngineeringAndTechnologies": "Engineering and technology",
    "medicalAndHealthSciences": "Medical and health sciences",
    "basicMedicine": "Medical and health sciences",
    "clinicalMedicine": "Medical and health sciences",
    "healthSciences": "Medical and health sciences",
    "healthBiotechnology": "Medical and health sciences",
    "otherMedicalSciences": "Medical and health sciences",
    "agriculturalSciences": "Agricultural sciences",
    "agricultureForestryAndFisheries": "Agricultural sciences",
    "animalAndDairyScience": "Agricultural sciences",
    "veterinaryScience": "Agricultural sciences",
    "agriculturalBiotechnology": "Agricultural sciences",
    "otherAgriculturalSciences": "Agricultural sciences",
    "socialScience": "Social science",
    "psychology": "Social science",
    "economicsAndBusiness": "Social science",
    "educationalSciences": "Social science",
    "sociology": "Social science",
    "law": "Social science",
    "politicalScience": "Social science",
    "socialAndEconomicGeography": "Social science",
    "mediaAndCommunications": "Social science",
    "otherSocialSciences": "Social science",
    "humanities": "Humanities",
    "historyAndArchaeology": "Humanities",
    "languagesAndLiterature": "Humanities",
    "philosophyEthicsAndReligion": "Humanities",
    "artsArtsHistoryOfArtsPerformingArtsMusic": "Humanities",
    "otherHumanities": "Humanities",
}

category_count = {
    "Natural sciences": 0,
    "Engineering and technology": 0,
    "Medical and health sciences": 0,
    "Agricultural sciences": 0,
    "Social science": 0,
    "Humanities": 0,
}

posts_by_cat = [
    {"category": category_dict[c["category"]], "cat_count": c["cat_count"]}
    for c in response.data
    if c["category"]
]
for c in posts_by_cat:
    category_count[c["category"]] += c["cat_count"]
posts_by_category = [
    {"category": k, "cat_count": v} for k, v in category_count.items()
]

response = supabase.table("posts_by_generator").select("*").execute()
posts_by_generator = [d for d in response.data if d["generator"] != "Other"]

ojs_define(post_count=post_count)
ojs_define(posts_by_year=posts_by_year)
ojs_define(posts_by_language=posts_by_language)
ojs_define(posts_by_category=posts_by_category)
ojs_define(posts_by_generator=posts_by_generator)
```

## Row

```{python}
#| content: valuebox
#| title: "Particating Blogs"
#| icon: journals
#| color: "#10b981"
dict(
  value = blog_count
)
```

```{python}
#| content: valuebox
#| title: "All Blog Posts"
#| icon: newspaper
#| color: "#0ea5e9"
dict(
  value = post_count
)
```

```{python}
# | content: valuebox
# | title: "Blog Posts in 2025"
# | icon: calendar-range
# | color: "#38bdf8"
dict(value=post_2025_count)
```

## Row

```{ojs}
//| title: "Blog Posts by Year"
Plot.plot({
  x: {
    tickFormat: "",
    label: null
  },
  y: {
    grid: true,
    label: null
  },
  marks: [
    Plot.ruleY([0]),
    Plot.barY(posts_by_year, {x: "year", y: "year_count", fill: "#0ea5e9"})
  ],
})
```

## Row

```{ojs}
//| title: "Blog Posts by Language"
Plot.plot({
  marginLeft: 150,
  marginRight: 60,
  height: 300,
  x: { axis: null },
  y: { label: null },
  marks: [
    Plot.barX(posts_by_language, {
      x: "lang_count",
      y: "language",
      sort: { y: "x", reverse: true, limit: 8 },
      fill: "language",
    }),

    Plot.text(posts_by_language, {
      text: d => `${(d.lang_count / post_count).toLocaleString(undefined, {
        style: "percent", 
        maximumSignificantDigits: 2
      })}`,
      y: "language",
      x: "lang_count",
      textAnchor: "start",
      dx: 5,
    })
  ]
})
```

## Row

```{ojs}
//| title: "Blog Posts by OECD Fields of Science and Technology"
Plot.plot({
  marginLeft: 150,
  marginRight: 60,
  height: 240,
  x: { axis: null },
  y: { label: null },
  marks: [
    Plot.barX(posts_by_category, {
      x: "cat_count",
      y: "category",
      sort: { y: "x", reverse: true, limit: 6 },
      fill: "category"
    }),

    Plot.text(posts_by_category, {
      text: d => `${(d.cat_count / post_count).toLocaleString(undefined, {
        style: "percent", 
        maximumSignificantDigits: 2
      })}`,
      y: "category",
      x: "cat_count",
      textAnchor: "start",
      dx: 5,
    })
  ]
})
```

## Row

```{ojs}
//| title: "Blog Posts by Blogging Platform"
Plot.plot({
  marginLeft: 150,
  marginRight: 60,
  height: 360,
  x: { axis: null },
  y: { label: null },
  marks: [
    Plot.barX(posts_by_generator, {
      x: "gen_count",
      y: "generator",
      sort: { y: "x", reverse: true, limit: 9 },
      fill: "generator",
    }),

    Plot.text(posts_by_generator, {
      text: d => `${(d.gen_count / post_count).toLocaleString(undefined, {
        style: "percent", 
        maximumSignificantDigits: 2
      })}`,
      y: "generator",
      x: "gen_count",
      textAnchor: "start",
      dx: 5,
    })
  ]
})
```