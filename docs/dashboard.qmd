--- 
title: "Dashboard"
format: 
  dashboard:
    expandable: false
    scrolling: true
---

```{python}
# | output: false
from os import environ
from dotenv import load_dotenv
from supabase import create_client, Client
import httpx
import pydash as py_


loaded = load_dotenv()

url: str = environ.get("SUPABASE_URL")
key: str = environ.get("SUPABASE_ANON_KEY")
supabase: Client = create_client(url, key)
status = ["active", "archived", "expired"]

url = "https://rogue-scholar.org/api/communities?type=blog&size=1"
response = httpx.get(url)
result = response.json()
blog_count = py_.get(result, "hits.total")

url = "https://rogue-scholar.org/api/records?size=1"
response = httpx.get(url)
result = response.json()
post_count = py_.get(result, "hits.total")
post_total_count = f"{post_count:,d}"
posts_by_language = py_.get(result, "aggregations.language.buckets")

url = "https://rogue-scholar.org/api/records?q=metadata.publication_date%3A%5B2025%20TO%202026%5D&size=1"
response = httpx.get(url)
result = response.json()
post_2025_count = py_.get(result, "hits.total")

url = "https://rogue-scholar.org/api/communities?size=1"
response = httpx.get(url)
result = response.json()
topic_count = py_.get(result, "hits.total")

url = "https://rogue-scholar.org/api/records?q=metadata.creators.person_or_org.identifiers.identifier:*&size=1"
response = httpx.get(url)
result = response.json()
post_orcid_count = f"{(py_.get(result, 'hits.total') / post_count):.2%}"

url = "https://rogue-scholar.org/api/records?q=metadata.creators.affiliations.id:*&size=1"
response = httpx.get(url)
result = response.json()
post_ror_count = f"{(py_.get(result, 'hits.total') / post_count):.2%}"

url = "https://rogue-scholar.org/api/records?q=metadata.funding.award.number:*&size=1"
response = httpx.get(url)
result = response.json()
post_funding_count = f"{(py_.get(result, 'hits.total') / post_count):.2%}"

url = "https://rogue-scholar.org/api/records?q=metadata.references.identifier:*&size=1"
response = httpx.get(url)
result = response.json()
post_reference_count = f"{(py_.get(result, 'hits.total') / post_count):.2%}"

url = "https://rogue-scholar.org/api/records?q=custom_fields.rs%5C:citations.identifier:*&size=1"
response = httpx.get(url)
result = response.json()
post_citation_count = f"{(py_.get(result, 'hits.total') / post_count):.2%}"

response = supabase.table("citations").select("*", count="exact").execute()
citation_count = f"{response.count:,d}"

response = supabase.table("posts_by_year").select("*").execute()
posts_by_year = [d for d in response.data if d["year"] in range(2005, 2026)]

response = supabase.table("posts_by_category").select("*").execute()
category_parents = {
    "naturalSciences": "naturalSciences",
    "mathematics": "naturalSciences",
    "computerAndInformationSciences": "naturalSciences",
    "physicalSciences": "naturalSciences",
    "chemicalSciences": "naturalSciences",
    "earthAndRelatedEnvironmentalSciences": "naturalSciences",
    "biologicalSciences": "naturalSciences",
    "otherNaturalSciences": "naturalSciences",
    "engineeringAndTechnology": "engineeringAndTechnology",
    "civilEngineering": "engineeringAndTechnology",
    "electricalEngineeringElectronicEngineeringInformationEngineering": "engineeringAndTechnology",
    "mechanicalEngineering": "engineeringAndTechnology",
    "chemicalEngineering": "engineeringAndTechnology",
    "materialsEngineering": "engineeringAndTechnology",
    "medicalEngineering": "engineeringAndTechnology",
    "environmentalEngineering": "engineeringAndTechnology",
    "environmentalBiotechnology": "engineeringAndTechnology",
    "industrialBiotechnology": "engineeringAndTechnology",
    "nanoTechnology": "engineeringAndTechnology",
    "otherEngineeringAndTechnologies": "engineeringAndTechnology",
    "medicalAndHealthSciences": "medicalAndHealthSciences",
    "basicMedicine": "medicalAndHealthSciences",
    "clinicalMedicine": "medicalAndHealthSciences",
    "healthSciences": "medicalAndHealthSciences",
    "healthBiotechnology": "medicalAndHealthSciences",
    "otherMedicalSciences": "medicalAndHealthSciences",
    "agriculturalSciences": "agriculturalSciences",
    "agricultureForestryAndFisheries": "agriculturalSciences",
    "animalAndDairyScience": "agriculturalSciences",
    "veterinaryScience": "agriculturalSciences",
    "agriculturalBiotechnology": "agriculturalSciences",
    "otherAgriculturalSciences": "agriculturalSciences",
    "socialScience": "socialScience",
    "psychology": "socialScience",
    "economicsAndBusiness": "socialScience",
    "educationalSciences": "socialScience",
    "sociology": "socialScience",
    "law": "socialScience",
    "politicalScience": "socialScience",
    "socialAndEconomicGeography": "socialScience",
    "mediaAndCommunications": "socialScience",
    "otherSocialSciences": "socialScience",
    "humanities": "humanities",
    "historyAndArchaeology": "humanities",
    "languagesAndLiterature": "humanities",
    "philosophyEthicsAndReligion": "humanities",
    "artsArtsHistoryOfArtsPerformingArtsMusic": "humanities",
    "otherHumanities": "humanities",
}

category_dict = {
    "naturalSciences": "Natural sciences",
    "mathematics": "Mathematics",
    "computerAndInformationSciences": "Computer and information sciences",
    "physicalSciences": "Physical sciences",
    "chemicalSciences": "Chemical sciences",
    "earthAndRelatedEnvironmentalSciences": "Earth and related environmental sciences",
    "biologicalSciences": "Biological sciences",
    "otherNaturalSciences": "Other natural sciences",
    "engineeringAndTechnology": "Engineering and technology",
    "civilEngineering": "Civil engineering",
    "electricalEngineeringElectronicEngineeringInformationEngineering": "Electrical engineering, electronic engineering, information engineering",
    "mechanicalEngineering": "Mechanical engineering",
    "chemicalEngineering": "Chemical engineering",
    "materialsEngineering": "Materials engineering",
    "medicalEngineering": "Medical engineering",
    "environmentalEngineering": "Environmental engineering",
    "environmentalBiotechnology": "Environmental biotechnology",
    "industrialBiotechnology": "Industrial biotechnology",
    "nanoTechnology": "Nano technology",
    "otherEngineeringAndTechnologies": "Other engineering and technologies",
    "medicalAndHealthSciences": "Medical and health sciences",
    "basicMedicine": "Basic medicine",
    "clinicalMedicine": "Clinical medicine",
    "healthSciences": "Health sciences",
    "healthBiotechnology": "Health biotechnology",
    "otherMedicalSciences": "Other medical sciences",
    "agriculturalSciences": "Agricultural sciences",
    "agricultureForestryAndFisheries": "Agriculture, forestry, and fisheries",
    "animalAndDairyScience": "Animal and dairy science",
    "veterinaryScience": "Veterinary science",
    "agriculturalBiotechnology": "Agricultural biotechnology",
    "otherAgriculturalSciences": "Other agricultural sciences",
    "socialScience": "Social science",
    "psychology": "Psychology",
    "economicsAndBusiness": "Economics and business",
    "educationalSciences": "Educational sciences",
    "sociology": "Sociology",
    "law": "Law",
    "politicalScience": "Political science",
    "socialAndEconomicGeography": "Social and economic geography",
    "mediaAndCommunications": "Media and communications",
    "otherSocialSciences": "Other social sciences",
    "humanities": "Humanities",
    "historyAndArchaeology": "History and archaeology",
    "languagesAndLiterature": "Languages and literature",
    "philosophyEthicsAndReligion": "Philosophy, ethics and religion",
    "artsArtsHistoryOfArtsPerformingArtsMusic": "Arts (arts, history of arts, performing arts, music)",
    "otherHumanities": "Other humanities",
}


def format_category(d):
    category = category_dict[d["category"]]
    parent = category_dict[category_parents[d["category"]]]
    label = category
    if category != parent:
        label = parent + ": " + category
    return {
        "category": category,
        "parent": parent,
        "label": label,
        "cat_count": d["cat_count"],
    }


posts_by_category = [
    format_category(d) for d in response.data if d["category"]
]

response = supabase.table("posts_by_generator").select("*").execute()
posts_by_generator = [d for d in response.data if d["generator"] != "Other"]

ojs_define(post_count=post_count)
ojs_define(posts_by_year=posts_by_year)
ojs_define(posts_by_language=posts_by_language)
ojs_define(posts_by_category=posts_by_category)
ojs_define(posts_by_generator=posts_by_generator)
```

## Row {.base-row}

::: {.card .blog}

{{< iconify grommet-icons:blog size=4x >}}

:::: {.h5}
Participating Blogs

::::: {.display-4}
[`{python} blog_count`](https://rogue-scholar.org/communities/search?q=&f=type%3Ablog&l=list&p=1&s=10&sort=newest)
:::::
::::
:::

::: {.card .blog-post}

{{< iconify ic:outline-article size=4x >}}

:::: {.h5}
All Blog Posts

::::: {.display-4}
[`{python} post_total_count`](https://rogue-scholar.org/search?q=&l=list&p=1&s=10&sort=newest)
:::::
::::
:::

::: {.card .citations}
{{< iconify codicon:references size=4x >}}

:::: {.h5}
All Citations

::::: {.display-4}
[`{python} citation_count`](https://rogue-scholar.org/search?q=citations:*&l=list&p=1&s=10&sort=newest)
:::::
::::
:::

## Row {.base-row}

::: {.card .orcid}

{{< iconify academicons:orcid size=4x >}}

:::: {.h5}
Posts with ORCID

::::: {.display-5}
[`{python} post_orcid_count`](https://rogue-scholar.org/search?q=&f=author_identifiers:orcid&l=list&p=1&s=10&sort=newest)
:::::
::::
:::

::: {.card .ror}
{{< iconify academicons:ror size=4x >}}

:::: {.h5}
Posts with ROR ID

::::: {.display-5}
[`{python} post_ror_count`](https://rogue-scholar.org/search?q=ror:*&l=list&p=1&s=10&sort=newest)
:::::
::::
:::

::: {.card .references}
{{< iconify codicon:list-ordered size=4x >}}

:::: {.h5}
Posts with References

::::: {.display-5}
[`{python} post_reference_count`](https://rogue-scholar.org/search?q=references:*&l=list&p=1&s=10&sort=newest)
:::::
::::
:::

::: {.card .funding}
{{< iconify octicon:sponsor-tiers-24 size=4x >}}

:::: {.h5}
Posts with Grant IDs

::::: {.display-5}
[`{python} post_funding_count`](https://rogue-scholar.org/search?q=funder:*&l=list&p=1&s=10&sort=newest)
:::::
::::
:::

## Row

```{ojs}
Plot.plot({
  title: "Blog Posts by Year",
  style: {
    fontSize: 11,
  },
  marginLeft: 100,
  marginRight: 100,
  height: 400,
  x: {
    tickFormat: "",
    label: null
  },
  y: {
    grid: true,
    label: null
  },
  marks: [
    Plot.ruleY([0]),
    Plot.rectY(posts_by_year, {
      x: "year",
      interval: 1,
      y: "year_count", 
      href: d => `https://rogue-scholar.org/search?q=metadata.publication_date:[${d.year}%20TO%20${d.year+1}]&sort=oldest`, 
      fill: "#ff725c",
    }),
    Plot.text(posts_by_year, {
      text: d => `${d.year_count}`,
      x: "year",
      y: "year_count",
      dx: 18,
      dy: -6,
      textAnchor: "start",
    })
  ],
})
```

## Row

```{ojs}
Plot.plot({
  title: "Blog Posts by Language",
  marginLeft: 150,
  marginRight: 60,
  height: 360,
  x: { axis: null },
  y: { label: null },
  style: {
    fontSize: 14,
  },
  marks: [
    Plot.barX(posts_by_language, {
      x: "doc_count",
      y: "label",
      href: d => `https://rogue-scholar.org/search?q=&f=language:${d.key}&sort=newest`,
      sort: { y: "x", reverse: true, limit: 5 },
      fill: "label",
    }),

    Plot.text(posts_by_language, {
      text: d => `${(d.doc_count / post_count).toLocaleString(undefined, {
        style: "percent", 
        maximumSignificantDigits: 2
      })}`,
      y: "label",
      x: "doc_count",
      textAnchor: "start",
      dx: 5,
    })
  ]
})
```

## Row

```{ojs}
Plot.plot({
  title: "Blog Posts by OECD Fields of Science and Technology",
  marginLeft: 540,
  marginRight: 60,
  height: 800,
  x: { axis: null },
  y: { label: null },
  style: {
    fontSize: 11,
  },
  marks: [
    Plot.barX(posts_by_category, {
      x: "cat_count",
      y: "label",
      href: d => `https://rogue-scholar.org/search?q=&f=subject:${d.category}&sort=newest`,
      fill: "parent",
    }),
    Plot.text(posts_by_category, {
      text: d => `${(d.cat_count / post_count).toLocaleString(undefined, {
        style: "percent", 
        maximumSignificantDigits: 2
      })}`,
      y: "label",
      x: "cat_count",
      textAnchor: "start",
      dx: 5,
    })

  ]
})
```

## Row

```{ojs}
Plot.plot({
  title: "Blog Posts by Blogging Platform",
  marginLeft: 150,
  marginRight: 60,
  height: 360,
  x: { axis: null },
  y: { label: null },
  style: {
    fontSize: 14,
  },
  marks: [
    Plot.barX(posts_by_generator, {
      x: "gen_count",
      y: "generator",
      href: d => `https://rogue-scholar.org/search?q=platform:${d.generator}&sort=newest`,
      sort: { y: "x", reverse: true, limit: 9 },
      fill: "generator",
    }),

    Plot.text(posts_by_generator, {
      text: d => `${(d.gen_count / post_count).toLocaleString(undefined, {
        style: "percent", 
        maximumSignificantDigits: 2
      })}`,
      y: "generator",
      x: "gen_count",
      textAnchor: "start",
      dx: 5,
    })
  ]
})
```